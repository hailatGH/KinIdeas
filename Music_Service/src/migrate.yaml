steps:
  # This step creates a new image, adding the Cloud SQL Auth Proxy to allow Cloud Build to connect securely to Cloud SQL
  - id: "docker-layer"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: bash
    args:
      - "-c"
      - "echo \"FROM ${_IMAGE_NAME}\nCOPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy\" > Dockerfile-proxy && docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy ."

  # This step runs the Django migration commands using the image built in the previous step
  # It starts the Cloud SQL Auth Proxy as a background process, then runs the Django commands.
  - id: "migrate"
    name: "${_IMAGE_NAME}-proxy"
    env: 
      - USE_CLOUD_SQL_AUTH_PROXY=false
    secretEnv:
      - MUSIC_SERVICE_SETTINGS
      - MUSIC_ADMIN_PASSWORD
    entrypoint: launcher
    args: 
      - "bash"
      - "-c"
      - "(/cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME}=tcp:5432 & sleep 2) && 
          python3 manage.py makemigrations &&
          python3 manage.py makemigrations player &&
          python3 manage.py migrate player &&
          python3 manage.py migrate --run-syncdb && 
          python3 manage.py collectstatic --noinput"

substitutions:
  _INSTANCE_CONNECTION_NAME: "${PROJECT_ID}:${_REGION}:kin-project-postgresql-v2"
  _IMAGE_NAME: "gcr.io/${PROJECT_ID}/music_service_image"
  _REGION: europe-west1

availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/music_service_settings/versions/latest
      env: MUSIC_SERVICE_SETTINGS
    - versionName: projects/${PROJECT_ID}/secrets/music_admin_password/versions/latest
      env: MUSIC_ADMIN_PASSWORD

options:
  dynamicSubstitutions: true